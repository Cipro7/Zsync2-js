/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type L2LogStruct = {
  l2ShardId: BigNumberish;
  isService: boolean;
  txNumberInBatch: BigNumberish;
  sender: AddressLike;
  key: BytesLike;
  value: BytesLike;
};

export type L2LogStructOutput = [
  l2ShardId: bigint,
  isService: boolean,
  txNumberInBatch: bigint,
  sender: string,
  key: string,
  value: string
] & {
  l2ShardId: bigint;
  isService: boolean;
  txNumberInBatch: bigint;
  sender: string;
  key: string;
  value: string;
};

export type L2MessageStruct = {
  txNumberInBatch: BigNumberish;
  sender: AddressLike;
  data: BytesLike;
};

export type L2MessageStructOutput = [
  txNumberInBatch: bigint,
  sender: string,
  data: string
] & { txNumberInBatch: bigint; sender: string; data: string };

export declare namespace Diamond {
  export type FacetCutStruct = {
    facet: AddressLike;
    action: BigNumberish;
    isFreezable: boolean;
    selectors: BytesLike[];
  };

  export type FacetCutStructOutput = [
    facet: string,
    action: bigint,
    isFreezable: boolean,
    selectors: string[]
  ] & {
    facet: string;
    action: bigint;
    isFreezable: boolean;
    selectors: string[];
  };

  export type DiamondCutDataStruct = {
    facetCuts: Diamond.FacetCutStruct[];
    initAddress: AddressLike;
    initCalldata: BytesLike;
  };

  export type DiamondCutDataStructOutput = [
    facetCuts: Diamond.FacetCutStructOutput[],
    initAddress: string,
    initCalldata: string
  ] & {
    facetCuts: Diamond.FacetCutStructOutput[];
    initAddress: string;
    initCalldata: string;
  };
}

export interface IBridgehubInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptAdmin"
      | "acceptGovernor"
      | "deposit"
      | "executeUpgrade"
      | "finalizeEthWithdrawal"
      | "freezeDiamond"
      | "getChainContract"
      | "getChainImplementation"
      | "getChainProxyAdmin"
      | "getChainStateTransition"
      | "getGovernor"
      | "getIsStateTransition"
      | "getName"
      | "getPriorityTxMaxGasLimit"
      | "getTotaStateTransitions"
      | "getTotalChains"
      | "isEthWithdrawalFinalized"
      | "l2TransactionBaseCost"
      | "newChain"
      | "newStateTransition"
      | "proveL1ToL2TransactionStatus"
      | "proveL2LogInclusion"
      | "proveL2MessageInclusion"
      | "requestL2Transaction"
      | "setPendingAdmin"
      | "setPendingGovernor"
      | "setStateTransitionChainContract"
      | "unfreezeDiamond"
      | "withdrawFunds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ExecuteUpgrade"
      | "Freeze"
      | "NewAdmin"
      | "NewChain"
      | "NewGovernor"
      | "NewPendingAdmin"
      | "NewPendingGovernor"
      | "Unfreeze"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeUpgrade",
    values: [Diamond.DiamondCutDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeEthWithdrawal",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "freezeDiamond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainProxyAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainStateTransition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIsStateTransition",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPriorityTxMaxGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotaStateTransitions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalChains",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isEthWithdrawalFinalized",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "l2TransactionBaseCost",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "newChain",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "newStateTransition",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proveL1ToL2TransactionStatus",
    values: [
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proveL2LogInclusion",
    values: [BigNumberish, BigNumberish, BigNumberish, L2LogStruct, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "proveL2MessageInclusion",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      L2MessageStruct,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "requestL2Transaction",
    values: [
      BigNumberish,
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike[],
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingGovernor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setStateTransitionChainContract",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unfreezeDiamond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeEthWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeDiamond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainProxyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainStateTransition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsStateTransition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriorityTxMaxGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotaStateTransitions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEthWithdrawalFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2TransactionBaseCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newChain", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newStateTransition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveL1ToL2TransactionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveL2LogInclusion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveL2MessageInclusion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestL2Transaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStateTransitionChainContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unfreezeDiamond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
}

export namespace ExecuteUpgradeEvent {
  export type InputTuple = [diamondCut: Diamond.DiamondCutDataStruct];
  export type OutputTuple = [diamondCut: Diamond.DiamondCutDataStructOutput];
  export interface OutputObject {
    diamondCut: Diamond.DiamondCutDataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FreezeEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewAdminEvent {
  export type InputTuple = [oldAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [oldAdmin: string, newAdmin: string];
  export interface OutputObject {
    oldAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewChainEvent {
  export type InputTuple = [
    chainId: BigNumberish,
    stateTransition: AddressLike,
    chainGovernance: AddressLike
  ];
  export type OutputTuple = [
    chainId: bigint,
    stateTransition: string,
    chainGovernance: string
  ];
  export interface OutputObject {
    chainId: bigint;
    stateTransition: string;
    chainGovernance: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewGovernorEvent {
  export type InputTuple = [oldGovernor: AddressLike, newGovernor: AddressLike];
  export type OutputTuple = [oldGovernor: string, newGovernor: string];
  export interface OutputObject {
    oldGovernor: string;
    newGovernor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewPendingAdminEvent {
  export type InputTuple = [
    oldPendingAdmin: AddressLike,
    newPendingAdmin: AddressLike
  ];
  export type OutputTuple = [oldPendingAdmin: string, newPendingAdmin: string];
  export interface OutputObject {
    oldPendingAdmin: string;
    newPendingAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewPendingGovernorEvent {
  export type InputTuple = [
    oldPendingGovernor: AddressLike,
    newPendingGovernor: AddressLike
  ];
  export type OutputTuple = [
    oldPendingGovernor: string,
    newPendingGovernor: string
  ];
  export interface OutputObject {
    oldPendingGovernor: string;
    newPendingGovernor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnfreezeEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IBridgehub extends BaseContract {
  connect(runner?: ContractRunner | null): IBridgehub;
  waitForDeployment(): Promise<this>;

  interface: IBridgehubInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptAdmin: TypedContractMethod<[], [void], "nonpayable">;

  acceptGovernor: TypedContractMethod<[], [void], "nonpayable">;

  deposit: TypedContractMethod<[_chainId: BigNumberish], [void], "payable">;

  executeUpgrade: TypedContractMethod<
    [_diamondCut: Diamond.DiamondCutDataStruct],
    [void],
    "nonpayable"
  >;

  finalizeEthWithdrawal: TypedContractMethod<
    [
      _chainId: BigNumberish,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  freezeDiamond: TypedContractMethod<[], [void], "nonpayable">;

  getChainContract: TypedContractMethod<
    [_chainId: BigNumberish],
    [string],
    "view"
  >;

  getChainImplementation: TypedContractMethod<[], [string], "view">;

  getChainProxyAdmin: TypedContractMethod<[], [string], "view">;

  getChainStateTransition: TypedContractMethod<
    [_chainId: BigNumberish],
    [string],
    "view"
  >;

  getGovernor: TypedContractMethod<[], [string], "view">;

  getIsStateTransition: TypedContractMethod<
    [_stateTransition: AddressLike],
    [boolean],
    "view"
  >;

  getName: TypedContractMethod<[], [string], "view">;

  getPriorityTxMaxGasLimit: TypedContractMethod<[], [bigint], "view">;

  getTotaStateTransitions: TypedContractMethod<[], [bigint], "view">;

  getTotalChains: TypedContractMethod<[], [bigint], "view">;

  isEthWithdrawalFinalized: TypedContractMethod<
    [
      _chainId: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish
    ],
    [boolean],
    "view"
  >;

  l2TransactionBaseCost: TypedContractMethod<
    [
      _chainId: BigNumberish,
      _gasPrice: BigNumberish,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish
    ],
    [bigint],
    "view"
  >;

  newChain: TypedContractMethod<
    [_chainId: BigNumberish, _stateTransition: AddressLike],
    [bigint],
    "nonpayable"
  >;

  newStateTransition: TypedContractMethod<
    [_stateTransition: AddressLike],
    [void],
    "nonpayable"
  >;

  proveL1ToL2TransactionStatus: TypedContractMethod<
    [
      _chainId: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _merkleProof: BytesLike[],
      _status: BigNumberish
    ],
    [boolean],
    "view"
  >;

  proveL2LogInclusion: TypedContractMethod<
    [
      _chainId: BigNumberish,
      _batchNumber: BigNumberish,
      _index: BigNumberish,
      _log: L2LogStruct,
      _proof: BytesLike[]
    ],
    [boolean],
    "view"
  >;

  proveL2MessageInclusion: TypedContractMethod<
    [
      _chainId: BigNumberish,
      _batchNumber: BigNumberish,
      _index: BigNumberish,
      _message: L2MessageStruct,
      _proof: BytesLike[]
    ],
    [boolean],
    "view"
  >;

  requestL2Transaction: TypedContractMethod<
    [
      _chainId: BigNumberish,
      _contractL2: AddressLike,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      _refundRecipient: AddressLike
    ],
    [string],
    "payable"
  >;

  setPendingAdmin: TypedContractMethod<
    [_newPendingAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  setPendingGovernor: TypedContractMethod<
    [_newPendingGovernor: AddressLike],
    [void],
    "nonpayable"
  >;

  setStateTransitionChainContract: TypedContractMethod<
    [_chainId: BigNumberish, _stateTransitionChainContract: AddressLike],
    [void],
    "nonpayable"
  >;

  unfreezeDiamond: TypedContractMethod<[], [void], "nonpayable">;

  withdrawFunds: TypedContractMethod<
    [_chainId: BigNumberish, _to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptAdmin"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "acceptGovernor"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[_chainId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "executeUpgrade"
  ): TypedContractMethod<
    [_diamondCut: Diamond.DiamondCutDataStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "finalizeEthWithdrawal"
  ): TypedContractMethod<
    [
      _chainId: BigNumberish,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "freezeDiamond"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getChainContract"
  ): TypedContractMethod<[_chainId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getChainImplementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getChainProxyAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getChainStateTransition"
  ): TypedContractMethod<[_chainId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getGovernor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getIsStateTransition"
  ): TypedContractMethod<[_stateTransition: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getName"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPriorityTxMaxGasLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotaStateTransitions"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalChains"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isEthWithdrawalFinalized"
  ): TypedContractMethod<
    [
      _chainId: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "l2TransactionBaseCost"
  ): TypedContractMethod<
    [
      _chainId: BigNumberish,
      _gasPrice: BigNumberish,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "newChain"
  ): TypedContractMethod<
    [_chainId: BigNumberish, _stateTransition: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "newStateTransition"
  ): TypedContractMethod<[_stateTransition: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "proveL1ToL2TransactionStatus"
  ): TypedContractMethod<
    [
      _chainId: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _merkleProof: BytesLike[],
      _status: BigNumberish
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "proveL2LogInclusion"
  ): TypedContractMethod<
    [
      _chainId: BigNumberish,
      _batchNumber: BigNumberish,
      _index: BigNumberish,
      _log: L2LogStruct,
      _proof: BytesLike[]
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "proveL2MessageInclusion"
  ): TypedContractMethod<
    [
      _chainId: BigNumberish,
      _batchNumber: BigNumberish,
      _index: BigNumberish,
      _message: L2MessageStruct,
      _proof: BytesLike[]
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "requestL2Transaction"
  ): TypedContractMethod<
    [
      _chainId: BigNumberish,
      _contractL2: AddressLike,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      _refundRecipient: AddressLike
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setPendingAdmin"
  ): TypedContractMethod<[_newPendingAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPendingGovernor"
  ): TypedContractMethod<
    [_newPendingGovernor: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setStateTransitionChainContract"
  ): TypedContractMethod<
    [_chainId: BigNumberish, _stateTransitionChainContract: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unfreezeDiamond"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<
    [_chainId: BigNumberish, _to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ExecuteUpgrade"
  ): TypedContractEvent<
    ExecuteUpgradeEvent.InputTuple,
    ExecuteUpgradeEvent.OutputTuple,
    ExecuteUpgradeEvent.OutputObject
  >;
  getEvent(
    key: "Freeze"
  ): TypedContractEvent<
    FreezeEvent.InputTuple,
    FreezeEvent.OutputTuple,
    FreezeEvent.OutputObject
  >;
  getEvent(
    key: "NewAdmin"
  ): TypedContractEvent<
    NewAdminEvent.InputTuple,
    NewAdminEvent.OutputTuple,
    NewAdminEvent.OutputObject
  >;
  getEvent(
    key: "NewChain"
  ): TypedContractEvent<
    NewChainEvent.InputTuple,
    NewChainEvent.OutputTuple,
    NewChainEvent.OutputObject
  >;
  getEvent(
    key: "NewGovernor"
  ): TypedContractEvent<
    NewGovernorEvent.InputTuple,
    NewGovernorEvent.OutputTuple,
    NewGovernorEvent.OutputObject
  >;
  getEvent(
    key: "NewPendingAdmin"
  ): TypedContractEvent<
    NewPendingAdminEvent.InputTuple,
    NewPendingAdminEvent.OutputTuple,
    NewPendingAdminEvent.OutputObject
  >;
  getEvent(
    key: "NewPendingGovernor"
  ): TypedContractEvent<
    NewPendingGovernorEvent.InputTuple,
    NewPendingGovernorEvent.OutputTuple,
    NewPendingGovernorEvent.OutputObject
  >;
  getEvent(
    key: "Unfreeze"
  ): TypedContractEvent<
    UnfreezeEvent.InputTuple,
    UnfreezeEvent.OutputTuple,
    UnfreezeEvent.OutputObject
  >;

  filters: {
    "ExecuteUpgrade(tuple)": TypedContractEvent<
      ExecuteUpgradeEvent.InputTuple,
      ExecuteUpgradeEvent.OutputTuple,
      ExecuteUpgradeEvent.OutputObject
    >;
    ExecuteUpgrade: TypedContractEvent<
      ExecuteUpgradeEvent.InputTuple,
      ExecuteUpgradeEvent.OutputTuple,
      ExecuteUpgradeEvent.OutputObject
    >;

    "Freeze()": TypedContractEvent<
      FreezeEvent.InputTuple,
      FreezeEvent.OutputTuple,
      FreezeEvent.OutputObject
    >;
    Freeze: TypedContractEvent<
      FreezeEvent.InputTuple,
      FreezeEvent.OutputTuple,
      FreezeEvent.OutputObject
    >;

    "NewAdmin(address,address)": TypedContractEvent<
      NewAdminEvent.InputTuple,
      NewAdminEvent.OutputTuple,
      NewAdminEvent.OutputObject
    >;
    NewAdmin: TypedContractEvent<
      NewAdminEvent.InputTuple,
      NewAdminEvent.OutputTuple,
      NewAdminEvent.OutputObject
    >;

    "NewChain(uint16,address,address)": TypedContractEvent<
      NewChainEvent.InputTuple,
      NewChainEvent.OutputTuple,
      NewChainEvent.OutputObject
    >;
    NewChain: TypedContractEvent<
      NewChainEvent.InputTuple,
      NewChainEvent.OutputTuple,
      NewChainEvent.OutputObject
    >;

    "NewGovernor(address,address)": TypedContractEvent<
      NewGovernorEvent.InputTuple,
      NewGovernorEvent.OutputTuple,
      NewGovernorEvent.OutputObject
    >;
    NewGovernor: TypedContractEvent<
      NewGovernorEvent.InputTuple,
      NewGovernorEvent.OutputTuple,
      NewGovernorEvent.OutputObject
    >;

    "NewPendingAdmin(address,address)": TypedContractEvent<
      NewPendingAdminEvent.InputTuple,
      NewPendingAdminEvent.OutputTuple,
      NewPendingAdminEvent.OutputObject
    >;
    NewPendingAdmin: TypedContractEvent<
      NewPendingAdminEvent.InputTuple,
      NewPendingAdminEvent.OutputTuple,
      NewPendingAdminEvent.OutputObject
    >;

    "NewPendingGovernor(address,address)": TypedContractEvent<
      NewPendingGovernorEvent.InputTuple,
      NewPendingGovernorEvent.OutputTuple,
      NewPendingGovernorEvent.OutputObject
    >;
    NewPendingGovernor: TypedContractEvent<
      NewPendingGovernorEvent.InputTuple,
      NewPendingGovernorEvent.OutputTuple,
      NewPendingGovernorEvent.OutputObject
    >;

    "Unfreeze()": TypedContractEvent<
      UnfreezeEvent.InputTuple,
      UnfreezeEvent.OutputTuple,
      UnfreezeEvent.OutputObject
    >;
    Unfreeze: TypedContractEvent<
      UnfreezeEvent.InputTuple,
      UnfreezeEvent.OutputTuple,
      UnfreezeEvent.OutputObject
    >;
  };
}
