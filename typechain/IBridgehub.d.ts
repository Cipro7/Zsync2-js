/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IBridgehubInterface extends ethers.utils.Interface {
  functions: {
    "acceptAdmin()": FunctionFragment;
    "acceptGovernor()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "executeUpgrade(tuple)": FunctionFragment;
    "finalizeEthWithdrawal(uint256,uint256,uint256,uint16,bytes,bytes32[])": FunctionFragment;
    "freezeDiamond()": FunctionFragment;
    "getChainContract(uint256)": FunctionFragment;
    "getChainImplementation()": FunctionFragment;
    "getChainProxyAdmin()": FunctionFragment;
    "getChainStateTransition(uint256)": FunctionFragment;
    "getGovernor()": FunctionFragment;
    "getIsStateTransition(address)": FunctionFragment;
    "getName()": FunctionFragment;
    "getPriorityTxMaxGasLimit()": FunctionFragment;
    "getTotaStateTransitions()": FunctionFragment;
    "getTotalChains()": FunctionFragment;
    "isEthWithdrawalFinalized(uint256,uint256,uint256)": FunctionFragment;
    "l2TransactionBaseCost(uint256,uint256,uint256,uint256)": FunctionFragment;
    "newChain(uint256,address)": FunctionFragment;
    "newStateTransition(address)": FunctionFragment;
    "proveL1ToL2TransactionStatus(uint256,bytes32,uint256,uint256,uint16,bytes32[],uint8)": FunctionFragment;
    "proveL2LogInclusion(uint256,uint256,uint256,tuple,bytes32[])": FunctionFragment;
    "proveL2MessageInclusion(uint256,uint256,uint256,tuple,bytes32[])": FunctionFragment;
    "requestL2Transaction(uint256,address,uint256,bytes,uint256,uint256,bytes[],address)": FunctionFragment;
    "setPendingAdmin(address)": FunctionFragment;
    "setPendingGovernor(address)": FunctionFragment;
    "setStateTransitionChainContract(uint256,address)": FunctionFragment;
    "unfreezeDiamond()": FunctionFragment;
    "withdrawFunds(uint256,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeUpgrade",
    values: [
      {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeEthWithdrawal",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "freezeDiamond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainProxyAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainStateTransition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIsStateTransition",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPriorityTxMaxGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotaStateTransitions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalChains",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isEthWithdrawalFinalized",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "l2TransactionBaseCost",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "newChain",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "newStateTransition",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "proveL1ToL2TransactionStatus",
    values: [
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proveL2LogInclusion",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBatch: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proveL2MessageInclusion",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      { txNumberInBatch: BigNumberish; sender: string; data: BytesLike },
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "requestL2Transaction",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike[],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingGovernor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStateTransitionChainContract",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unfreezeDiamond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeEthWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeDiamond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainProxyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainStateTransition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsStateTransition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriorityTxMaxGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotaStateTransitions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEthWithdrawalFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2TransactionBaseCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newChain", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newStateTransition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveL1ToL2TransactionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveL2LogInclusion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveL2MessageInclusion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestL2Transaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStateTransitionChainContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unfreezeDiamond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;

  events: {
    "ExecuteUpgrade(tuple)": EventFragment;
    "Freeze()": EventFragment;
    "NewAdmin(address,address)": EventFragment;
    "NewChain(uint16,address,address)": EventFragment;
    "NewGovernor(address,address)": EventFragment;
    "NewPendingAdmin(address,address)": EventFragment;
    "NewPendingGovernor(address,address)": EventFragment;
    "Unfreeze()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExecuteUpgrade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Freeze"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewChain"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewGovernor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPendingAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPendingGovernor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unfreeze"): EventFragment;
}

export class IBridgehub extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IBridgehubInterface;

  functions: {
    acceptAdmin(overrides?: Overrides): Promise<ContractTransaction>;

    "acceptAdmin()"(overrides?: Overrides): Promise<ContractTransaction>;

    acceptGovernor(overrides?: Overrides): Promise<ContractTransaction>;

    "acceptGovernor()"(overrides?: Overrides): Promise<ContractTransaction>;

    deposit(
      _chainId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "deposit(uint256)"(
      _chainId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    executeUpgrade(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executeUpgrade(tuple)"(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    finalizeEthWithdrawal(
      _chainId: BigNumberish,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "finalizeEthWithdrawal(uint256,uint256,uint256,uint16,bytes,bytes32[])"(
      _chainId: BigNumberish,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    freezeDiamond(overrides?: Overrides): Promise<ContractTransaction>;

    "freezeDiamond()"(overrides?: Overrides): Promise<ContractTransaction>;

    getChainContract(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getChainContract(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getChainImplementation(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getChainImplementation()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getChainProxyAdmin(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getChainProxyAdmin()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getChainStateTransition(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getChainStateTransition(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getGovernor(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getGovernor()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getIsStateTransition(
      _stateTransition: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "getIsStateTransition(address)"(
      _stateTransition: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    getName(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getName()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getPriorityTxMaxGasLimit(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getPriorityTxMaxGasLimit()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getTotaStateTransitions(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getTotaStateTransitions()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getTotalChains(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getTotalChains()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    isEthWithdrawalFinalized(
      _chainId: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isEthWithdrawalFinalized(uint256,uint256,uint256)"(
      _chainId: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    l2TransactionBaseCost(
      _chainId: BigNumberish,
      _gasPrice: BigNumberish,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "l2TransactionBaseCost(uint256,uint256,uint256,uint256)"(
      _chainId: BigNumberish,
      _gasPrice: BigNumberish,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    newChain(
      _chainId: BigNumberish,
      _stateTransition: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "newChain(uint256,address)"(
      _chainId: BigNumberish,
      _stateTransition: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    newStateTransition(
      _stateTransition: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "newStateTransition(address)"(
      _stateTransition: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    proveL1ToL2TransactionStatus(
      _chainId: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _merkleProof: BytesLike[],
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "proveL1ToL2TransactionStatus(uint256,bytes32,uint256,uint256,uint16,bytes32[],uint8)"(
      _chainId: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _merkleProof: BytesLike[],
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    proveL2LogInclusion(
      _chainId: BigNumberish,
      _batchNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBatch: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "proveL2LogInclusion(uint256,uint256,uint256,tuple,bytes32[])"(
      _chainId: BigNumberish,
      _batchNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBatch: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    proveL2MessageInclusion(
      _chainId: BigNumberish,
      _batchNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBatch: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "proveL2MessageInclusion(uint256,uint256,uint256,tuple,bytes32[])"(
      _chainId: BigNumberish,
      _batchNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBatch: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    requestL2Transaction(
      _chainId: BigNumberish,
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      _refundRecipient: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "requestL2Transaction(uint256,address,uint256,bytes,uint256,uint256,bytes[],address)"(
      _chainId: BigNumberish,
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      _refundRecipient: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    setPendingAdmin(
      _newPendingAdmin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPendingAdmin(address)"(
      _newPendingAdmin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPendingGovernor(
      _newPendingGovernor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPendingGovernor(address)"(
      _newPendingGovernor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setStateTransitionChainContract(
      _chainId: BigNumberish,
      _stateTransitionChainContract: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setStateTransitionChainContract(uint256,address)"(
      _chainId: BigNumberish,
      _stateTransitionChainContract: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unfreezeDiamond(overrides?: Overrides): Promise<ContractTransaction>;

    "unfreezeDiamond()"(overrides?: Overrides): Promise<ContractTransaction>;

    withdrawFunds(
      _chainId: BigNumberish,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawFunds(uint256,address,uint256)"(
      _chainId: BigNumberish,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  acceptAdmin(overrides?: Overrides): Promise<ContractTransaction>;

  "acceptAdmin()"(overrides?: Overrides): Promise<ContractTransaction>;

  acceptGovernor(overrides?: Overrides): Promise<ContractTransaction>;

  "acceptGovernor()"(overrides?: Overrides): Promise<ContractTransaction>;

  deposit(
    _chainId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "deposit(uint256)"(
    _chainId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  executeUpgrade(
    _diamondCut: {
      facetCuts: {
        facet: string;
        action: BigNumberish;
        isFreezable: boolean;
        selectors: BytesLike[];
      }[];
      initAddress: string;
      initCalldata: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "executeUpgrade(tuple)"(
    _diamondCut: {
      facetCuts: {
        facet: string;
        action: BigNumberish;
        isFreezable: boolean;
        selectors: BytesLike[];
      }[];
      initAddress: string;
      initCalldata: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  finalizeEthWithdrawal(
    _chainId: BigNumberish,
    _l2BlockNumber: BigNumberish,
    _l2MessageIndex: BigNumberish,
    _l2TxNumberInBlock: BigNumberish,
    _message: BytesLike,
    _merkleProof: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "finalizeEthWithdrawal(uint256,uint256,uint256,uint16,bytes,bytes32[])"(
    _chainId: BigNumberish,
    _l2BlockNumber: BigNumberish,
    _l2MessageIndex: BigNumberish,
    _l2TxNumberInBlock: BigNumberish,
    _message: BytesLike,
    _merkleProof: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  freezeDiamond(overrides?: Overrides): Promise<ContractTransaction>;

  "freezeDiamond()"(overrides?: Overrides): Promise<ContractTransaction>;

  getChainContract(
    _chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getChainContract(uint256)"(
    _chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getChainImplementation(overrides?: CallOverrides): Promise<string>;

  "getChainImplementation()"(overrides?: CallOverrides): Promise<string>;

  getChainProxyAdmin(overrides?: CallOverrides): Promise<string>;

  "getChainProxyAdmin()"(overrides?: CallOverrides): Promise<string>;

  getChainStateTransition(
    _chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getChainStateTransition(uint256)"(
    _chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getGovernor(overrides?: CallOverrides): Promise<string>;

  "getGovernor()"(overrides?: CallOverrides): Promise<string>;

  getIsStateTransition(
    _stateTransition: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "getIsStateTransition(address)"(
    _stateTransition: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getName(overrides?: CallOverrides): Promise<string>;

  "getName()"(overrides?: CallOverrides): Promise<string>;

  getPriorityTxMaxGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  "getPriorityTxMaxGasLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTotaStateTransitions(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotaStateTransitions()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalChains(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalChains()"(overrides?: CallOverrides): Promise<BigNumber>;

  isEthWithdrawalFinalized(
    _chainId: BigNumberish,
    _l2MessageIndex: BigNumberish,
    _l2TxNumberInBlock: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isEthWithdrawalFinalized(uint256,uint256,uint256)"(
    _chainId: BigNumberish,
    _l2MessageIndex: BigNumberish,
    _l2TxNumberInBlock: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  l2TransactionBaseCost(
    _chainId: BigNumberish,
    _gasPrice: BigNumberish,
    _l2GasLimit: BigNumberish,
    _l2GasPerPubdataByteLimit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "l2TransactionBaseCost(uint256,uint256,uint256,uint256)"(
    _chainId: BigNumberish,
    _gasPrice: BigNumberish,
    _l2GasLimit: BigNumberish,
    _l2GasPerPubdataByteLimit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  newChain(
    _chainId: BigNumberish,
    _stateTransition: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "newChain(uint256,address)"(
    _chainId: BigNumberish,
    _stateTransition: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  newStateTransition(
    _stateTransition: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "newStateTransition(address)"(
    _stateTransition: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  proveL1ToL2TransactionStatus(
    _chainId: BigNumberish,
    _l2TxHash: BytesLike,
    _l2BlockNumber: BigNumberish,
    _l2MessageIndex: BigNumberish,
    _l2TxNumberInBlock: BigNumberish,
    _merkleProof: BytesLike[],
    _status: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "proveL1ToL2TransactionStatus(uint256,bytes32,uint256,uint256,uint16,bytes32[],uint8)"(
    _chainId: BigNumberish,
    _l2TxHash: BytesLike,
    _l2BlockNumber: BigNumberish,
    _l2MessageIndex: BigNumberish,
    _l2TxNumberInBlock: BigNumberish,
    _merkleProof: BytesLike[],
    _status: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  proveL2LogInclusion(
    _chainId: BigNumberish,
    _batchNumber: BigNumberish,
    _index: BigNumberish,
    _log: {
      l2ShardId: BigNumberish;
      isService: boolean;
      txNumberInBatch: BigNumberish;
      sender: string;
      key: BytesLike;
      value: BytesLike;
    },
    _proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "proveL2LogInclusion(uint256,uint256,uint256,tuple,bytes32[])"(
    _chainId: BigNumberish,
    _batchNumber: BigNumberish,
    _index: BigNumberish,
    _log: {
      l2ShardId: BigNumberish;
      isService: boolean;
      txNumberInBatch: BigNumberish;
      sender: string;
      key: BytesLike;
      value: BytesLike;
    },
    _proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  proveL2MessageInclusion(
    _chainId: BigNumberish,
    _batchNumber: BigNumberish,
    _index: BigNumberish,
    _message: {
      txNumberInBatch: BigNumberish;
      sender: string;
      data: BytesLike;
    },
    _proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "proveL2MessageInclusion(uint256,uint256,uint256,tuple,bytes32[])"(
    _chainId: BigNumberish,
    _batchNumber: BigNumberish,
    _index: BigNumberish,
    _message: {
      txNumberInBatch: BigNumberish;
      sender: string;
      data: BytesLike;
    },
    _proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  requestL2Transaction(
    _chainId: BigNumberish,
    _contractL2: string,
    _l2Value: BigNumberish,
    _calldata: BytesLike,
    _l2GasLimit: BigNumberish,
    _l2GasPerPubdataByteLimit: BigNumberish,
    _factoryDeps: BytesLike[],
    _refundRecipient: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "requestL2Transaction(uint256,address,uint256,bytes,uint256,uint256,bytes[],address)"(
    _chainId: BigNumberish,
    _contractL2: string,
    _l2Value: BigNumberish,
    _calldata: BytesLike,
    _l2GasLimit: BigNumberish,
    _l2GasPerPubdataByteLimit: BigNumberish,
    _factoryDeps: BytesLike[],
    _refundRecipient: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  setPendingAdmin(
    _newPendingAdmin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPendingAdmin(address)"(
    _newPendingAdmin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPendingGovernor(
    _newPendingGovernor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPendingGovernor(address)"(
    _newPendingGovernor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setStateTransitionChainContract(
    _chainId: BigNumberish,
    _stateTransitionChainContract: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setStateTransitionChainContract(uint256,address)"(
    _chainId: BigNumberish,
    _stateTransitionChainContract: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unfreezeDiamond(overrides?: Overrides): Promise<ContractTransaction>;

  "unfreezeDiamond()"(overrides?: Overrides): Promise<ContractTransaction>;

  withdrawFunds(
    _chainId: BigNumberish,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawFunds(uint256,address,uint256)"(
    _chainId: BigNumberish,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptAdmin(overrides?: CallOverrides): Promise<void>;

    "acceptAdmin()"(overrides?: CallOverrides): Promise<void>;

    acceptGovernor(overrides?: CallOverrides): Promise<void>;

    "acceptGovernor()"(overrides?: CallOverrides): Promise<void>;

    deposit(_chainId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "deposit(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    executeUpgrade(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "executeUpgrade(tuple)"(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeEthWithdrawal(
      _chainId: BigNumberish,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "finalizeEthWithdrawal(uint256,uint256,uint256,uint16,bytes,bytes32[])"(
      _chainId: BigNumberish,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    freezeDiamond(overrides?: CallOverrides): Promise<void>;

    "freezeDiamond()"(overrides?: CallOverrides): Promise<void>;

    getChainContract(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getChainContract(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getChainImplementation(overrides?: CallOverrides): Promise<string>;

    "getChainImplementation()"(overrides?: CallOverrides): Promise<string>;

    getChainProxyAdmin(overrides?: CallOverrides): Promise<string>;

    "getChainProxyAdmin()"(overrides?: CallOverrides): Promise<string>;

    getChainStateTransition(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getChainStateTransition(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getGovernor(overrides?: CallOverrides): Promise<string>;

    "getGovernor()"(overrides?: CallOverrides): Promise<string>;

    getIsStateTransition(
      _stateTransition: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "getIsStateTransition(address)"(
      _stateTransition: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getName(overrides?: CallOverrides): Promise<string>;

    "getName()"(overrides?: CallOverrides): Promise<string>;

    getPriorityTxMaxGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "getPriorityTxMaxGasLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotaStateTransitions(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotaStateTransitions()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalChains(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalChains()"(overrides?: CallOverrides): Promise<BigNumber>;

    isEthWithdrawalFinalized(
      _chainId: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isEthWithdrawalFinalized(uint256,uint256,uint256)"(
      _chainId: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    l2TransactionBaseCost(
      _chainId: BigNumberish,
      _gasPrice: BigNumberish,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "l2TransactionBaseCost(uint256,uint256,uint256,uint256)"(
      _chainId: BigNumberish,
      _gasPrice: BigNumberish,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newChain(
      _chainId: BigNumberish,
      _stateTransition: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "newChain(uint256,address)"(
      _chainId: BigNumberish,
      _stateTransition: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newStateTransition(
      _stateTransition: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "newStateTransition(address)"(
      _stateTransition: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proveL1ToL2TransactionStatus(
      _chainId: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _merkleProof: BytesLike[],
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "proveL1ToL2TransactionStatus(uint256,bytes32,uint256,uint256,uint16,bytes32[],uint8)"(
      _chainId: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _merkleProof: BytesLike[],
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    proveL2LogInclusion(
      _chainId: BigNumberish,
      _batchNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBatch: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "proveL2LogInclusion(uint256,uint256,uint256,tuple,bytes32[])"(
      _chainId: BigNumberish,
      _batchNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBatch: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    proveL2MessageInclusion(
      _chainId: BigNumberish,
      _batchNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBatch: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "proveL2MessageInclusion(uint256,uint256,uint256,tuple,bytes32[])"(
      _chainId: BigNumberish,
      _batchNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBatch: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    requestL2Transaction(
      _chainId: BigNumberish,
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      _refundRecipient: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "requestL2Transaction(uint256,address,uint256,bytes,uint256,uint256,bytes[],address)"(
      _chainId: BigNumberish,
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      _refundRecipient: string,
      overrides?: CallOverrides
    ): Promise<string>;

    setPendingAdmin(
      _newPendingAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPendingAdmin(address)"(
      _newPendingAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPendingGovernor(
      _newPendingGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPendingGovernor(address)"(
      _newPendingGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setStateTransitionChainContract(
      _chainId: BigNumberish,
      _stateTransitionChainContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setStateTransitionChainContract(uint256,address)"(
      _chainId: BigNumberish,
      _stateTransitionChainContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unfreezeDiamond(overrides?: CallOverrides): Promise<void>;

    "unfreezeDiamond()"(overrides?: CallOverrides): Promise<void>;

    withdrawFunds(
      _chainId: BigNumberish,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawFunds(uint256,address,uint256)"(
      _chainId: BigNumberish,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ExecuteUpgrade(diamondCut: null): EventFilter;

    Freeze(): EventFilter;

    NewAdmin(oldAdmin: string | null, newAdmin: string | null): EventFilter;

    NewChain(
      chainId: BigNumberish | null,
      stateTransition: null,
      chainGovernance: string | null
    ): EventFilter;

    NewGovernor(
      oldGovernor: string | null,
      newGovernor: string | null
    ): EventFilter;

    NewPendingAdmin(
      oldPendingAdmin: string | null,
      newPendingAdmin: string | null
    ): EventFilter;

    NewPendingGovernor(
      oldPendingGovernor: string | null,
      newPendingGovernor: string | null
    ): EventFilter;

    Unfreeze(): EventFilter;
  };

  estimateGas: {
    acceptAdmin(overrides?: Overrides): Promise<BigNumber>;

    "acceptAdmin()"(overrides?: Overrides): Promise<BigNumber>;

    acceptGovernor(overrides?: Overrides): Promise<BigNumber>;

    "acceptGovernor()"(overrides?: Overrides): Promise<BigNumber>;

    deposit(
      _chainId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "deposit(uint256)"(
      _chainId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    executeUpgrade(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "executeUpgrade(tuple)"(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    finalizeEthWithdrawal(
      _chainId: BigNumberish,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "finalizeEthWithdrawal(uint256,uint256,uint256,uint16,bytes,bytes32[])"(
      _chainId: BigNumberish,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    freezeDiamond(overrides?: Overrides): Promise<BigNumber>;

    "freezeDiamond()"(overrides?: Overrides): Promise<BigNumber>;

    getChainContract(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getChainContract(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    "getChainImplementation()"(overrides?: CallOverrides): Promise<BigNumber>;

    getChainProxyAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    "getChainProxyAdmin()"(overrides?: CallOverrides): Promise<BigNumber>;

    getChainStateTransition(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getChainStateTransition(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    "getGovernor()"(overrides?: CallOverrides): Promise<BigNumber>;

    getIsStateTransition(
      _stateTransition: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getIsStateTransition(address)"(
      _stateTransition: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<BigNumber>;

    "getName()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPriorityTxMaxGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "getPriorityTxMaxGasLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotaStateTransitions(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotaStateTransitions()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalChains(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalChains()"(overrides?: CallOverrides): Promise<BigNumber>;

    isEthWithdrawalFinalized(
      _chainId: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isEthWithdrawalFinalized(uint256,uint256,uint256)"(
      _chainId: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l2TransactionBaseCost(
      _chainId: BigNumberish,
      _gasPrice: BigNumberish,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "l2TransactionBaseCost(uint256,uint256,uint256,uint256)"(
      _chainId: BigNumberish,
      _gasPrice: BigNumberish,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newChain(
      _chainId: BigNumberish,
      _stateTransition: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "newChain(uint256,address)"(
      _chainId: BigNumberish,
      _stateTransition: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    newStateTransition(
      _stateTransition: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "newStateTransition(address)"(
      _stateTransition: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    proveL1ToL2TransactionStatus(
      _chainId: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _merkleProof: BytesLike[],
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proveL1ToL2TransactionStatus(uint256,bytes32,uint256,uint256,uint16,bytes32[],uint8)"(
      _chainId: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _merkleProof: BytesLike[],
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proveL2LogInclusion(
      _chainId: BigNumberish,
      _batchNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBatch: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proveL2LogInclusion(uint256,uint256,uint256,tuple,bytes32[])"(
      _chainId: BigNumberish,
      _batchNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBatch: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proveL2MessageInclusion(
      _chainId: BigNumberish,
      _batchNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBatch: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proveL2MessageInclusion(uint256,uint256,uint256,tuple,bytes32[])"(
      _chainId: BigNumberish,
      _batchNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBatch: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestL2Transaction(
      _chainId: BigNumberish,
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      _refundRecipient: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "requestL2Transaction(uint256,address,uint256,bytes,uint256,uint256,bytes[],address)"(
      _chainId: BigNumberish,
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      _refundRecipient: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    setPendingAdmin(
      _newPendingAdmin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPendingAdmin(address)"(
      _newPendingAdmin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPendingGovernor(
      _newPendingGovernor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPendingGovernor(address)"(
      _newPendingGovernor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setStateTransitionChainContract(
      _chainId: BigNumberish,
      _stateTransitionChainContract: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setStateTransitionChainContract(uint256,address)"(
      _chainId: BigNumberish,
      _stateTransitionChainContract: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unfreezeDiamond(overrides?: Overrides): Promise<BigNumber>;

    "unfreezeDiamond()"(overrides?: Overrides): Promise<BigNumber>;

    withdrawFunds(
      _chainId: BigNumberish,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawFunds(uint256,address,uint256)"(
      _chainId: BigNumberish,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptAdmin(overrides?: Overrides): Promise<PopulatedTransaction>;

    "acceptAdmin()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    acceptGovernor(overrides?: Overrides): Promise<PopulatedTransaction>;

    "acceptGovernor()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    deposit(
      _chainId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256)"(
      _chainId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    executeUpgrade(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executeUpgrade(tuple)"(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    finalizeEthWithdrawal(
      _chainId: BigNumberish,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "finalizeEthWithdrawal(uint256,uint256,uint256,uint16,bytes,bytes32[])"(
      _chainId: BigNumberish,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    freezeDiamond(overrides?: Overrides): Promise<PopulatedTransaction>;

    "freezeDiamond()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    getChainContract(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getChainContract(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getChainImplementation()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainProxyAdmin(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getChainProxyAdmin()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainStateTransition(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getChainStateTransition(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getGovernor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIsStateTransition(
      _stateTransition: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getIsStateTransition(address)"(
      _stateTransition: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getName()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPriorityTxMaxGasLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPriorityTxMaxGasLimit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotaStateTransitions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotaStateTransitions()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalChains(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTotalChains()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isEthWithdrawalFinalized(
      _chainId: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isEthWithdrawalFinalized(uint256,uint256,uint256)"(
      _chainId: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2TransactionBaseCost(
      _chainId: BigNumberish,
      _gasPrice: BigNumberish,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "l2TransactionBaseCost(uint256,uint256,uint256,uint256)"(
      _chainId: BigNumberish,
      _gasPrice: BigNumberish,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newChain(
      _chainId: BigNumberish,
      _stateTransition: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "newChain(uint256,address)"(
      _chainId: BigNumberish,
      _stateTransition: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    newStateTransition(
      _stateTransition: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "newStateTransition(address)"(
      _stateTransition: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    proveL1ToL2TransactionStatus(
      _chainId: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _merkleProof: BytesLike[],
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proveL1ToL2TransactionStatus(uint256,bytes32,uint256,uint256,uint16,bytes32[],uint8)"(
      _chainId: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BlockNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBlock: BigNumberish,
      _merkleProof: BytesLike[],
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proveL2LogInclusion(
      _chainId: BigNumberish,
      _batchNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBatch: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proveL2LogInclusion(uint256,uint256,uint256,tuple,bytes32[])"(
      _chainId: BigNumberish,
      _batchNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBatch: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proveL2MessageInclusion(
      _chainId: BigNumberish,
      _batchNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBatch: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proveL2MessageInclusion(uint256,uint256,uint256,tuple,bytes32[])"(
      _chainId: BigNumberish,
      _batchNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBatch: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestL2Transaction(
      _chainId: BigNumberish,
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      _refundRecipient: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "requestL2Transaction(uint256,address,uint256,bytes,uint256,uint256,bytes[],address)"(
      _chainId: BigNumberish,
      _contractL2: string,
      _l2Value: BigNumberish,
      _calldata: BytesLike,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      _factoryDeps: BytesLike[],
      _refundRecipient: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    setPendingAdmin(
      _newPendingAdmin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPendingAdmin(address)"(
      _newPendingAdmin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPendingGovernor(
      _newPendingGovernor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPendingGovernor(address)"(
      _newPendingGovernor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setStateTransitionChainContract(
      _chainId: BigNumberish,
      _stateTransitionChainContract: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setStateTransitionChainContract(uint256,address)"(
      _chainId: BigNumberish,
      _stateTransitionChainContract: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unfreezeDiamond(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unfreezeDiamond()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    withdrawFunds(
      _chainId: BigNumberish,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawFunds(uint256,address,uint256)"(
      _chainId: BigNumberish,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
